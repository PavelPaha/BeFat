@page "/"
@inherits LayoutComponentBase
@using BeeFat.Domain.Infrastructure
@using BeeFat.Helpers

@inject NavigationManager NavigationManager
@inject HomeHelper HomeHelper;
@rendermode InteractiveServer

@using Blazorise

<Modal @ref="HomeHelper.Modal" Title="Modal title" Class="popup_window">
    <div>

        @if (!(HomeHelper.SelectedFoodProduct is null))
        {
            <h2>@HomeHelper.SelectedFoodProduct.Name</h2>
            @switch (HomeHelper.SelectedFoodProduct)
            {
                case JournalFoodGram:
                    <div>
                        Запланированная масса - @HomeHelper.SelectedFoodProduct.PortionSize г
                        <InputNumber min="0" class="form-control" placeholder="Напишите количество съеденной еды в граммах" @bind-Value="HomeHelper.PortionSize"/>
                    </div>
                    break;
                case JournalFoodPiece:
                    <div>
                        Запланированное количество - @HomeHelper.SelectedFoodProduct.PortionSize штук
                        <InputNumber min="0" class="form-control" placeholder="Напишите количество съеденной еды" @bind-Value="HomeHelper.PortionSize"/>
                    </div>
                    break;
                default:
                    <div>
                        Запланированное количество - @HomeHelper.SelectedFoodProduct.PortionSize штук
                        <InputNumber min="0" class="form-control" placeholder="Напишите количество съеденной еды" @bind-Value="HomeHelper.PortionSize"/>
                    </div>
                    break;
            }
        }

        <Button Style="background-color: #c2cb88;" @onclick="() => {
       HomeHelper.Modal.Close(CloseReason.UserClosing); 
       HomeHelper.Save();        
        var fpSource = HomeHelper.User.Journal.FoodProducts;
        HomeHelper.GetTotalMacronutrientsByDay(fpSource); 
            }">Сохранить</Button>
    </div>
</Modal>

@{
    var user = HomeHelper.FetchUserInfo();
    var track = user.Track;
    var redirectToTrackEditing = () => RedirectTo("edit");
    var redirectToUserProfile = () => RedirectTo("profile");
}


@code{
    protected override void OnInitialized()
    {
        // StateHasChanged();
    }

    private void RedirectTo(string url)
    {
        NavigationManager.NavigateTo(url, forceLoad: true);
    }
}

<PageTitle>Home</PageTitle>

<div class="container">
    <div class="home-sidebar">
        <h2>@track.Name</h2>
        <ul>
            <li>
                <button @onclick="redirectToTrackEditing">Редактировать трек</button>
            </li>
            <li>
                <button @onclick="redirectToUserProfile">Изменить параметры тела</button>
            </li>
        </ul>
    </div>

    <div class="main-content">
        <div class="daily-plan">
            <h2>План питания на сегодня</h2>
            <ul class="daily-food-list product-list">
                <li>
                    <div>Название продукта</div>
                    <div>Масса</div>
                    <div>Белки</div>
                    <div>Жиры</div>
                    <div>Углеводы</div>
                    <div>Калории</div>
                    <div>Выполнено</div>
                </li>
                @{
                    foreach (var product in HomeHelper.GetProductsByDay(user.Journal.FoodProducts))
                    {
                        var foodInfo = product.Macronutrient * product.PortionCoeff;
                        <li>
                            <div>@product.Name</div>
                            <div>
                                <span class="portion-size">@($"{product.PortionSize} {(product is JournalFoodGram ? "г" : "шт")}")</span>
                            </div>
                            <div>
                                <span class="portion-size">@foodInfo.Proteins г</span>
                            </div>
                            <div>
                                <span class="portion-size">@foodInfo.Fats г</span>
                            </div>
                            <div>
                                <span class="portion-size">@foodInfo.Carbohydrates г</span>
                            </div>
                            <div>
                                <span class="portion-size">@foodInfo.Calories ккал</span>
                            </div>
                            <button type="button" class="checkbox-button" @onclick="() => { HomeHelper.SelectedFoodProduct = product; HomeHelper.ShowModalWindow(product); }" disabled=@product.IsEaten>&#10003;</button>
                            @if (product.IsEaten)
                            {
                                <button type="button" class="checkbox-button" @onclick="() => { product.IsEaten = false; HomeHelper.SelectedFoodProduct = product; HomeHelper.ChangeFoodProductInfoAndSave(false); }">&times;</button>
                            }
                        </li>
                    }
                }
            </ul>
            <div class="total">
                @{ var totalMacronutrient = HomeHelper.GetTotalMacronutrientsByDay(user.Journal.FoodProducts, HomeHelper.Today); }
                Итого: <span class="parameter">@totalMacronutrient.Proteins г</span> белков, <span class="parameter">@totalMacronutrient.Fats г</span> жиров, <span class="parameter">@totalMacronutrient.Carbohydrates г</span> углеводов, <span class="parameter">@totalMacronutrient.Calories</span> калорий.
            </div>
        </div>
        <div class="next-days-plan product-list">
            <h3>План питания на следующие дни</h3>
            <ul class="product-list">
                @{
                    foreach (var products in HomeHelper.GetNextDaysFoodProducts(user.Journal.FoodProducts, HomeHelper.Today))
                    {
                        <li>
                            <div class="product">
                                <span class="product-name">
                                    @{
                                        @* <span>@HomeHelper.Days[dayNumber]: </span> *@
                                        var takenProducts = products.Take(4).ToList();
                                        for (var i = 0; i < takenProducts.Count; i++)
                                        {
                                            var product = takenProducts[i];
                                            @product.Name;
                                            if (i != takenProducts.Count - 1)
                                            {
                                                <span>, </span>
                                            }
                                        }

                                        if (products.Count() > 4)
                                        {
                                            <span>...</span>
                                        }
                                    }
                                </span>
                            </div>
                        </li>
                    }
                }
            </ul>
        </div>
    </div>

    <div class="home-sidebar">
        <div class="user">
            <div class="user-info">
                <img src="avatar.jpg">
                <span class="username">@user.PersonName.FirstName @user.PersonName.LastName</span>
            </div>
            <button class="action-button">Выйти</button>
        </div>
        <div class="parameters">
            <h3>Параметры</h3>
            <p>Масса: <span class="parameter">@user.Weight кг</span></p>
            <p>Рост: <span class="parameter">@user.Height см</span></p>
            <p>Желаемые калории: <span class="parameter">@user.RightCalories ккал</span></p>
        </div>
    </div>
</div>